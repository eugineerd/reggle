name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  lints:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-ci-${{ hashFiles('**/Cargo.toml') }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal
          components: rustfmt, clippy
      - name: Install bevy dependecies
        run: sudo apt-get update; sudo apt-get install --no-install-recommends libasound2-dev libudev-dev libwayland-dev libxkbcommon-dev
      - name: Rustfmt
        run: cargo fmt --all -- --check
      - name: Clippy
        run: cargo clippy --workspace --profile dev-ci --all-targets --all-features --no-deps -- -D warnings
    
  build-native:
    needs: lints
    strategy: 
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-ci-${{ hashFiles('**/Cargo.toml') }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install bevy dependecies
        run: sudo apt-get update; sudo apt-get install --no-install-recommends libasound2-dev libudev-dev libwayland-dev libxkbcommon-dev
        if: runner.os == 'linux'
      - name: Build
        run: cargo build --profile dev-ci

  build-wasm:
    runs-on: ubuntu-latest
    needs: lints
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: wasm-cargo-ci-${{ hashFiles('**/Cargo.toml') }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: wasm32-unknown-unknown
      - name: Install bevy dependecies
        run: sudo apt-get update; sudo apt-get install --no-install-recommends libasound2-dev libudev-dev libwayland-dev libxkbcommon-dev
      - name: Download trunk
        run: wget -qO- https://github.com/thedodd/trunk/releases/download/v0.15.0/trunk-x86_64-unknown-linux-gnu.tar.gz | tar -xzf-
      - name: Build
        run: ./trunk build
        
  test-native:
    needs: build-native
    strategy: 
      matrix:
        # Test only on windows for now
        os: [windows-latest] 
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-ci-${{ hashFiles('**/Cargo.toml') }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install bevy dependecies
        run: sudo apt-get update; sudo apt-get install --no-install-recommends libasound2-dev libudev-dev libwayland-dev libxkbcommon-dev
        if: runner.os == 'linux'
      - name: Run
        run: cargo run --profile dev-ci --features exit_timeout
        
  notify-on-fail:
    needs: [test-native, build-wasm]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Send TG message ${{ github.actor }}
        run: |
          curl --get \
          --data-urlencode "chat_id=${{ secrets.TG_CHAT_ID }}" \
          --data-urlencode "parse_mode=Markdown" \
          --data-urlencode  "text=$(echo -e \
          "\`${{ github.repository }}\`: \`${{ github.workflow }}\` workflow failed!\n \
          commit: \`${{ github.sha }}\`\n \
          author: \`${{ github.actor }}\`" \
          )" \
          https://api.telegram.org/bot${{ secrets.TG_BOT_TOKEN }}/sendMessage
